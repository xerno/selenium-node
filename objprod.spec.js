// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('obj_prod', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars["windowHandles"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error("New window did not appear before timeout")
  }
  it('obj_prod', async function() {
    await driver.get("http://admin-test.kokiska.cz/")
    await driver.findElement(By.id("search")).click()
    await driver.findElement(By.id("search")).sendKeys("5677937")
    await driver.findElement(By.css(".btn:nth-child(5) > .fa")).click()
    await driver.sleep(500)
    vars["rowOrdersSize"] = await driver.findElements(By.xpath("//*[contains(@class, \'row-orders \')]")).length
    if (!!await driver.executeScript("return (arguments[0] > 1)", vars["rowOrdersSize"])) {
      await driver.findElement(By.css(".row-orders:nth-child(1) strong")).click()
    }
    await driver.findElement(By.id("ui-id-22")).click()
    await driver.sleep(200)
    vars["pickovaniSize"] = await driver.findElements(By.xpath("//body/div[@id=\'page\']//div[@id=\'snippet-order-logs\']//table[@class=\'table-condensed table table-hover\']//*[contains(text(), \'pickování\')]")).length
    await driver.sleep(1000)
    vars["intermediarySize"] = await driver.findElements(By.xpath("//td[text()=\'Zprostředkovatel\']")).length
    if (!!await driver.executeScript("return (arguments[0] > 0)", vars["pickovaniSize"])) {
      vars["profitSuccessSize"] = await driver.findElements(By.xpath("//span[@class=\'label tooltip-title label-success\']")).length
      vars["profitImportantSize"] = await driver.findElements(By.xpath("//span[@class=\'label tooltip-title label-important\']")).length
      vars["profitSize"] = await driver.executeScript("return Number (arguments[0]) + Number (arguments[1])", vars["profitSuccessSize"],vars["profitImportantSize"])
    } else {
      vars["profitSize"] = await driver.findElements(By.xpath("//span[@class=\'label tooltip-title label-important\']")).length
    }
    vars["partnerProfitSize"] = await driver.findElements(By.xpath("//span[@class=\'label label-info tooltip-title\']")).length
    vars["catalogNumberSize"] = await driver.findElements(By.xpath("//*[contains(@class, \'order-item \')]//div[@class=\'pull-right\']")).length
    vars["expSize"] = await driver.findElements(By.xpath("//span[@class=\'label label-success tooltip-title\']")).length
    vars["priceSize"] = await driver.findElements(By.xpath("//span[@class=\'tooltip-title\' and @data-original-title=\'1 kus bez DPH\']")).length
    vars["priceVatSize"] = await driver.findElements(By.xpath("//span[@class=\'tooltip-title\' and @data-original-title=\'1 kus včetně DPH\']")).length
    vars["delSize"] = await driver.findElements(By.xpath("//button[@class=\'btn btn-mini btn-danger\']")).length
    vars["productNameSize"] = await driver.findElements(By.xpath("//a[@class=\'tooltip-title\' and contains(@href, \'http://admin-test.kokiska.cz/cz/products/detail/?id=\')]")).length
    vars["updateVatSize"] = await driver.findElements(By.xpath("//button[@class=\'btn-do-link ajax btn btn-mini btn-info\' and contains(@data-url, \'http://admin-test.kokiska.cz/cz/order-item/update-item-percent/?itemId=\')]")).length
    vars["updateSize"] = await driver.findElements(By.xpath("//button[@class=\'btn-do-link ajax btn btn-mini btn-info\' and contains(@data-url, \'ttp://admin-test.kokiska.cz/cz/orders/order-item/update-item\')]")).length
    console.log(vars["updateSize"])
    console.log(vars["updateVatSize"])
    if (!!await driver.executeScript("return (arguments[0] > 0)", vars["pickovaniSize"])) {
      vars["itemSize"] = await driver.findElements(By.xpath("//table[@class=\'maxWidth table-normal table-order-items\']//*[contains(@class, \'order-item \')]")).length
    } else {
      vars["itemSize"] = await driver.findElements(By.xpath("//*[contains(@class, \'order-item \')]")).length
    }
    console.log("itemSize: vars["itemSize"]")
    vars["itemGreySize"] = await driver.findElements(By.xpath("//*[@class=\'order-item grey\']")).length
    console.log("greySize: vars["itemGreySize"]")
    vars["itemWhiteSize"] = await driver.findElements(By.xpath("//*[@class=\'order-item \']")).length
    console.log("whiteSize: vars["itemWhiteSize"]")
    vars["itSize"] = await driver.executeScript("return Number (arguments[0]) + Number (arguments[1])", vars["itemGreySize"],vars["itemWhiteSize"])
    vars["itemImgSize"] = await driver.findElements(By.xpath("//*[@class=\'order-item-image\']")).length
    assert(vars["itemImgSize"].toString() == "vars["itemSize"]")
    assert(vars["itemSize"].toString() == "vars["itSize"]")
    if (!!await driver.executeScript("return (arguments[0] > 0)", vars["intermediarySize"])) {
      assert(vars["partnerProfitSize"].toString() == "vars["itemSize"]")
    }
    assert(vars["profitSize"].toString() == "vars["itemSize"]")
    assert(vars["catalogNumberSize"].toString() == "vars["itemSize"]")
    assert(vars["priceSize"].toString() == "vars["itemSize"]")
    assert(vars["priceVatSize"].toString() == "vars["itemSize"]")
    assert(vars["productNameSize"].toString() == "vars["itemSize"]")
    vars["i"] = "1"
    vars["r"] = "vars["itemSize"]"
    console.log(vars["r"])
    while(!!await driver.executeScript("return (arguments[0] > 0)", vars["r"])) {
      vars["price"] = await driver.findElement(By.xpath("//table[@id=\'items\']/tbody/tr/td/table/tbody/tr[vars["i"]]/td[4]/span")).getText()
      console.log(vars["price"])
      vars["p"] = await driver.executeScript("var p = parseFloat(arguments[0].replace(\' \', \'\'), 10); return p", vars["price"])
      console.log(vars["p"])
      vars["vat"] = await driver.findElement(By.css("#items > tbody > tr > td > table > tbody > tr.order-item.grey > td.help.help-small")).getText()
      console.log(vars["vat"])
      vars["x"] = await driver.executeScript("const x = document.querySelectorAll(\"#items > tbody > tr > td > table > tbody > tr > td:nth-child(4) > span:nth-child(1)\"); return x")
      console.log(vars["x"])
      vars["productNumber"] = await driver.findElement(By.css("#items > tbody > tr > td > table > tbody > tr:nth-child(vars["i"]) > td:nth-child(2) > div > div.pull-right")).getText()
      vars["root"] = await driver.getWindowHandle()
      vars["windowHandles"] = await driver.getAllWindowHandles()
      await driver.findElement(By.css("table.table-order-items > tbody> tr:nth-child(vars["i"]) > td:nth-child(2) > div > a.tooltip-title")).click()
      vars["tab1"] = await waitForWindow(2000)
      await driver.switchTo().window(vars["tab1"])
      vars["catalogNumber"] = await driver.findElement(By.css("#snippet-product-info > tbody > tr:nth-child(2) > td:nth-child(2) > a")).getText()
      assert(vars["catalogNumber"].toString() == "vars["productNumber"]")
      await driver.close()
      await driver.switchTo().window(vars["root"])
      vars["r"] = await driver.executeScript("return Number (arguments[0]) - 1", vars["r"])
      vars["i"] = await driver.executeScript("return Number (arguments[0]) + 1", vars["i"])
    }
    {
      const elements = await driver.findElements(By.css("#postage"))
      assert(elements.length)
    }
    {
      const elements = await driver.findElements(By.css(".postage-image"))
      assert(elements.length)
    }
    {
      const elements = await driver.findElements(By.css("#postage > tbody > tr > td:nth-child(2)"))
      assert(elements.length)
    }
  })
})
